{"version":3,"sources":["marionette.base-view.js","src/marionette.base-view.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GACvH,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,qBAAqB,CAAC,EAAE,OAAO,CAAC,GACrF,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;CACrC,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE;AAAE,cAAY,CAAC;;ACFrC,MAAI,QAAA,GAAW,EAAA,CAAG,UAAA,CAAW,MAAA,CAAO;;;;AAIlC,iBAAa,EAAA,uBAAC,QAAA,EAAU,IAAA,EAAM;AAC5B,UAAI,UAAA,GAAa,IAAA,CAAK,mBAAA,CAAoB,QAAA,CAAA,CAAA;;AAE1C,UAAI,CAAC,IAAA,CAAK,SAAA,CAAU,UAAA,CAAA,EAAa;AAC/B,YAAA,CAAK,SAAA,CAAU,UAAA,EAAY,QAAA,CAAA,CAAA;OACjC;;AAEI,UAAA,CAAK,SAAA,CAAU,UAAA,CAAA,CAAY,IAAA,CAAK,IAAA,CAAA,CAAA;AAChC,aAAO,IAAA,CAAA;KACX;;;AAGE,gBAAY,EAAA,sBAAC,QAAA,EAAU;AACrB,UAAI,UAAA,GAAa,IAAA,CAAK,mBAAA,CAAoB,QAAA,CAAA,CAAA;AAC1C,UAAI,MAAA,GAAS,IAAA,CAAK,SAAA,CAAU,UAAA,CAAA,CAAA;AAC5B,aAAO,MAAA,GAAS,MAAA,CAAO,WAAA,GAAc,SAAA,CAAA;KACzC;;;AAGE,uBAAmB,EAAA,6BAAC,QAAA,EAAU;AAC5B,oBAAY,QAAA,CAAS;KACzB;GACA,CAAA,CAAA;;AA5BA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;;AAAA,MAAA,oBAAA,GAAA,QAAA,CAAA;;ADsCE,SAAO,oBAAoB,CAAC;CAE7B,CAAC,CAAE","file":"marionette.base-view.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['backbone.marionette'], factory) :\n  global.BaseView = factory(global.Mn)\n}(this, function (Mn) { 'use strict';\n\n  var BaseView = Mn.LayoutView.extend({\n\n    // Update `showChildView` to create the region, if it doesn't exist.\n    // Then, return the LayoutView instance.\n    showChildView(selector, view) {\n      var regionName = this._generateRegionName(selector);\n\n      if (!this.getRegion(regionName)) {\n        this.addRegion(regionName, selector);\n      }\n\n      this.getRegion(regionName).show(view);\n      return this;\n    },\n\n    // Update `getChildView` to also accept a selector as an argument\n    getChildView(selector) {\n      var regionName = this._generateRegionName(selector);\n      var region = this.getRegion(regionName);\n      return region ? region.currentView : undefined;\n    },\n\n    // Given a selector, return the name of the region.\n    _generateRegionName(selector) {\n      return `r-${selector}`;\n    },\n  });\n\n  Mn.BaseView = BaseView;\n\n  var marionette_base_view = BaseView;\n\n  return marionette_base_view;\n\n}));\n","import Mn from 'backbone.marionette';\n\nvar BaseView = Mn.LayoutView.extend({\n\n  // Update `showChildView` to create the region, if it doesn't exist.\n  // Then, return the LayoutView instance.\n  showChildView(selector, view) {\n    var regionName = this._generateRegionName(selector);\n\n    if (!this.getRegion(regionName)) {\n      this.addRegion(regionName, selector);\n    }\n\n    this.getRegion(regionName).show(view);\n    return this;\n  },\n\n  // Update `getChildView` to also accept a selector as an argument\n  getChildView(selector) {\n    var regionName = this._generateRegionName(selector);\n    var region = this.getRegion(regionName);\n    return region ? region.currentView : undefined;\n  },\n\n  // Given a selector, return the name of the region.\n  _generateRegionName(selector) {\n    return `r-${selector}`;\n  },\n});\n\nMn.BaseView = BaseView;\n\nexport default BaseView;\n"],"sourceRoot":"/source/"}