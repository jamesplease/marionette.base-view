{"version":3,"sources":["/source/marionette.base-view.js","/source/src/marionette.base-view.js"],"names":["global","factory","exports","module","require","define","amd","BaseView","Mn","this","LayoutView","extend","showChildView","selector","view","regionName","_generateRegionName","getRegion","addRegion","show","getChildView","region","currentView","undefined","marionette_base_view"],"mappings":"CAAA,SAAWA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,wBAC9E,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,uBAAwBJ,GAC7ED,EAAOO,SAAWN,EAAQD,EAAOQ,KACjCC,KAAM,SAAUD,GAAM,YCFxB,IAAID,GAAWC,EAAGE,WAAWC,QAI3BC,cAAa,SAACC,EAAUC,GACtB,GAAIC,GAAaN,KAAKO,oBAAoBH,EAO1C,OALKJ,MAAKQ,UAAUF,IAClBN,KAAKS,UAAUH,EAAYF,GAG7BJ,KAAKQ,UAAUF,GAAYI,KAAKL,GACzBL,MAITW,aAAY,SAACP,GACX,GAAIE,GAAaN,KAAKO,oBAAoBH,GACtCQ,EAASZ,KAAKQ,UAAUF,EAC5B,OAAOM,GAASA,EAAOC,YAAcC,QAIvCP,oBAAmB,SAACH,GAClB,MAAA,KAAYA,IA1BhBL,GAAAD,SAAAA,CAAA,IAAAiB,GAAAjB,CDsCE,OAAOiB","file":"marionette.base-view.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['backbone.marionette'], factory) :\n  global.BaseView = factory(global.Mn)\n}(this, function (Mn) { 'use strict';\n\n  var BaseView = Mn.LayoutView.extend({\n\n    // Update `showChildView` to create the region, if it doesn't exist.\n    // Then, return the LayoutView instance.\n    showChildView(selector, view) {\n      var regionName = this._generateRegionName(selector);\n\n      if (!this.getRegion(regionName)) {\n        this.addRegion(regionName, selector);\n      }\n\n      this.getRegion(regionName).show(view);\n      return this;\n    },\n\n    // Update `getChildView` to also accept a selector as an argument\n    getChildView(selector) {\n      var regionName = this._generateRegionName(selector);\n      var region = this.getRegion(regionName);\n      return region ? region.currentView : undefined;\n    },\n\n    // Given a selector, return the name of the region.\n    _generateRegionName(selector) {\n      return `r-${selector}`;\n    },\n  });\n\n  Mn.BaseView = BaseView;\n\n  var marionette_base_view = BaseView;\n\n  return marionette_base_view;\n\n}));\n","import Mn from 'backbone.marionette';\n\nvar BaseView = Mn.LayoutView.extend({\n\n  // Update `showChildView` to create the region, if it doesn't exist.\n  // Then, return the LayoutView instance.\n  showChildView(selector, view) {\n    var regionName = this._generateRegionName(selector);\n\n    if (!this.getRegion(regionName)) {\n      this.addRegion(regionName, selector);\n    }\n\n    this.getRegion(regionName).show(view);\n    return this;\n  },\n\n  // Update `getChildView` to also accept a selector as an argument\n  getChildView(selector) {\n    var regionName = this._generateRegionName(selector);\n    var region = this.getRegion(regionName);\n    return region ? region.currentView : undefined;\n  },\n\n  // Given a selector, return the name of the region.\n  _generateRegionName(selector) {\n    return `r-${selector}`;\n  },\n});\n\nMn.BaseView = BaseView;\n\nexport default BaseView;\n"],"sourceRoot":"/source/"}